# -*- coding: utf-8 -*-
"""DeepBrainDetect: A YOLOv8-Powered Framework for Enhanced Brain Tumor Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V3Bmr3j2eZUTm24Hb6viQfG5dcqqoVMI

''' Environment Setup and Library Imports
    Data Loading and Preprocessing
    Data Exploration and Visualization
    Model Training
    Model Evaluation and Visualization
    Deployment with Gradio
    YOLOv8 Architecture (Diagram Visualization)  '''
"""

from google.colab import drive
drive.mount('/content/drive')

"""Environment setup (this will provide YOLOv8 model and tools for training and interface )"""

!pip install ultralytics
from ultralytics.utils import metrics

"""# Library Import"""

import albumentations as A  #image augumentation
import numpy as np          #for numerical operation)
import cv2                  #for openCv image processing
from PIL import Image       #for imaage augmentation
from pathlib import Path    #for file  path management
from tqdm import tqdm       #for progress bars
import yaml                 #for configuration files fileğŸ“‚
import os                   #for operating system interations
import random               #for random
import pandas as pd         #for data analysis
import seaborn as sns       #for data visualization
import plotly.graph_objects as go  # also for data visualization.
import matplotlib.patches as patches #for plotting
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics
import ultralytics
ultralytics.checks()
from ultralytics import YOLO

"""## Data Loading and Processing"""

def images_preprocessing(images):
    processed_images = []
    for img in images:

        img_resized = cv2.resize(img, (640,640))  #(we resize in deeplearning to ensure input sizes are consistent)

        processed_images.append(img_resized)

    return np.array(processed_images)
# Assuming 'train_path' and 'val_path' are defined as before
train_path = '/content/drive/MyDrive/yolo dataset testing/Train'
val_path = '/content/drive/MyDrive/yolo dataset testing/Val'

"""## Data Exploration and Visualization graph ğŸ“Š ğŸš€"""

def display_random_images(directory, num_images=3): #Defines our function to display random images from a directory

    for class_name in os.listdir(directory):
        class_path = os.path.join(directory, class_name)
        images_path = os.path.join(directory, class_name, 'images')

        images = os.listdir(images_path)
        selected_images = random.sample(images, num_images)

        fig, axes = plt.subplots(1,3, figsize=(15,5))

        fig.suptitle(f"Displaying Images from {class_name}", fontsize=16, fontweight='bold')

        for ax, image in zip(axes, selected_images):
            image_path = os.path.join(images_path, image)
            img = mpimg.imread(image_path)
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            ax.imshow(img)
            ax.set_title(f"{class_name} - {os.path.basename(image)}",fontweight='bold')
            ax.set_xticks([])
            ax.set_yticks([])


display_random_images(train_path)

"""## Data Exploration and Visualization graph ğŸ“Š ğŸš€  cont'd"""

import os # Import the os module
import pandas as pd # Import pandas and assign it to the alias 'pd'
import plotly.graph_objects as go # Import plotly.graph_objects and assign it to the alias 'go'

def count_images_in_folders(base_path):   # here we Defined a function to count the number of images in each class folder and visualize it using a pie chart

    image_counts = []

    # Get all directories in the base_path
    main_directories = [d for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, d))]

    for main_dir in main_directories:
        images_dir_path = os.path.join(base_path, main_dir, 'images')

        images = [f for f in os.listdir(images_dir_path) if os.path.isfile(os.path.join(images_dir_path, f))]

        print(f'\033[1mNumber of Images in {main_dir} : {len(images)}\033[0m')
        image_counts.append({'Class': main_dir, 'Count': len(images)})
    df = pd.DataFrame(image_counts).sort_values(by='Count',ascending=False)

    colors = ['#a6a832','#32a0a8', '#599173', '#bfbf95']
    fig = go.Figure(data=[go.Pie(labels=df['Class'], values = df['Count'], pull=[0.1,0,0,0],
                             textinfo ='label+percent', marker=dict(colors=colors, line=dict(color='black', width=2)))])
    fig.update_layout(paper_bgcolor='#dff2ef', plot_bgcolor='#dff2ef', title = 'Number of Images in Each Class', width=650, height=600, title_x=0.5,
                  title_font_family="Times New Roman", title_font_color="#191e1f", title_font_size=30, font_family="Times New Roman", font_size=15)
    fig.show()
    return

base_path = '/content/drive/MyDrive/yolo dataset testing/Train'
count_images_in_folders(base_path)

"""# Model Training computerğŸ–¥




"""

import yaml # Import the yaml module

dataset_yaml = {
                                             #( here dataset_yaml Defines a dictionary containing the dataset configuration, including the path to the dataset, training and validation directories, and class names)

    'path': '/content/drive/MyDrive/yolo dataset testing',
    'train': 'Train',
    'val': 'Val',
    'names': ["Glioma", "Meningioma", "No Tumor", "Pituitary"]
}

with open('/content/drive/MyDrive/yolo dataset testing/dataset_yaml.yaml', 'w') as file:
    yaml.dump(dataset_yaml, file)

from ultralytics import YOLO # Import the YOLO class from ultralytics

model = YOLO('yolov8n.yaml')
model = YOLO('yolov8n.pt') #this loads our pretrain model
train_results = model.train(data='/content/drive/MyDrive/yolo dataset testing/dataset_yaml.yaml' , epochs=7, imgsz=640)  #hence our model is trained.

"""# Model Evaluation and Visualization:"""

import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def count_labels_in_folders(base_path):
    label_counts = []

    # Get all directories in the base_path
    main_directories = [d for d in os.listdir(base_path) if os.path.isdir(os.path.join(base_path, d))]

    for main_dir in main_directories:
        label_dir_path = os.path.join(base_path, main_dir, 'labels')

        labels = [f for f in os.listdir(label_dir_path) if os.path.isfile(os.path.join(label_dir_path, f))]

        print(f'\033[1mNumber of Labels in {main_dir} : {len(labels)}\033[0m')
        label_counts.append({'Class': main_dir, 'Count': len(labels)})
    df1 = pd.DataFrame(label_counts).sort_values(by='Count',ascending=False)

    sns.barplot(df1, x='Class', y='Count', width=0.7, edgecolor='purple', linewidth=2, palette=sns.cubehelix_palette(n_colors=len(df1)))

    plt.title("Distribution of the labels", weight='bold', fontsize=14)
    plt.xticks(color='black',weight='bold')
    plt.yticks(color='black',weight='bold')
    plt.xlabel('', weight='bold', fontsize=14)
    plt.ylabel('',weight='bold', fontsize=14)
    plt.grid(False)

    return

base_path = '/content/drive/MyDrive/yolo dataset testing/Train'
count_labels_in_folders(base_path)

# Path to the results directory (adjust the path based on your setup)
results_dir = '/content/runs/detect/train'

# Import the necessary module
from PIL import Image

# List all images in the directory
result_images = [img for img in os.listdir(results_dir) if img.endswith('.jpg') or img.endswith('.png')]

# Display the images
for img_name in result_images:
    img_path = os.path.join(results_dir, img_name)

    #here we are  Using Image.open() to open the image file
    img = Image.open(img_path)

    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.title(img_name)
    plt.axis('off')
    plt.show()

"""# Deployed using gradio

pip install gradio ultralytics opencv-python-headless
"""

!pip install gradio ultralytics opencv-python-headless

code = """
import gradio as gr
from ultralytics import YOLO
import cv2
import numpy as np
from PIL import Image

# Load the trained YOLOv8 model
model = YOLO("/content/drive/MyDrive/yolo dataset testing/runs/detect/train/weights/best.pt")

# Inference function
def detect_objects(image):
    image_np = np.array(image)
    results = model.predict(source=image_np, save=False, conf=0.25)
    result_img = results[0].plot()
    result_img_rgb = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)
    return Image.fromarray(result_img_rgb)

interface = gr.Interface(
    fn=detect_objects,
    inputs=gr.Image(type="pil", label="Upload MRI Image"),
    outputs=gr.Image(type="pil", label="Detection Result"),
    title="Brain Tumor Detection ğŸ§  with YOLOv8",
    description="Upload an MRI image to detect brain tumors using a YOLOv8 model trained on four classes: Glioma, Meningioma, Pituitary, and No Tumor."
)

interface.launch(share=True, debug=True)
"""
with open("app.py", "w") as f:
    f.write(code)

!python3 app.py

!pip install diagrams

from diagrams import Diagram, Cluster, Edge
from diagrams.aws.compute import EC2
from diagrams.aws.database import RDS
from diagrams.aws.network import ELB
from IPython.display import Image

with Diagram("Brain Tumor Detection Architecture", show=False, filename="brain_tumor_diagram") as diag:
    with Cluster("Data Input"):
        input_data = EC2("MRI Images")

    with Cluster("Preprocessing"):
        preprocessing = EC2("Preprocessing")
        input_data >> Edge(label="Resize, Augmentation") >> preprocessing

    with Cluster("Model Training"):
        training_data = RDS("Training Data")
        model = EC2("YOLOv8 Model")
        preprocessing >> Edge(label="Data Split") >> training_data
        training_data >> Edge(label="Training") >> model

    with Cluster("Model Evaluation"):
        evaluation = EC2("Evaluation Metrics")
        model >> Edge(label="Validation Data") >> evaluation

    with Cluster("Deployment"):
        gradio_app = ELB("Gradio App")
        model >> Edge(label="Deployment") >> gradio_app

    with Cluster("Output"):
        output = EC2("Tumor Detection Results")
        gradio_app >> Edge(label="Prediction") >> output

# Display the saved diagram image
Image(filename="brain_tumor_diagram.png")

